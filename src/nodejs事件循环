   ┌───────────────────────────┐
┌─>│           timers          │	本阶段执行 setTimeout setInterval 调度的回调
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │     pending callbacks     │	执行延迟到下一个循环迭代的I/O回调
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
│  │       idle, prepare       │	系统内部使用
│  └─────────────┬─────────────┘      ┌───────────────┐
│  ┌─────────────┴─────────────┐      │   incoming:   │
│  │           poll            │<─────┤  connections, │		轮询：检索新的I/O事件，执行与I/O相关的回调.
│  └─────────────┬─────────────┘      │   data, etc.  │
│  ┌─────────────┴─────────────┐      └───────────────┘
│  │           check           │	setImmediate 调度的回调
│  └─────────────┬─────────────┘
│  ┌─────────────┴─────────────┐
└──┤      close callbacks      │	关闭回调的函数：socket.on('close', ...)
   └───────────────────────────┘

轮询 阶段有两个重要的功能：

计算应该阻塞和轮询 I/O 的时间。
然后，处理 轮询 队列里的事件。

当事件循环进入 轮询 阶段且 没有被调度的计时器时 ，将发生以下两种情况之一：
如果 轮询 队列 不是空的 ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。
如果 轮询 队列 是空的 ，还有两件事发生：
如果脚本被 setImmediate() 调度，则事件循环将结束 轮询 阶段，并继续 检查 阶段以执行那些被调度的脚本。
如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，然后立即执行。
一旦 轮询 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。